7-base_geometry.py module
    ========================

    Import module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

    SUCCESSFUL TEST CASES:

    Test values greater than 0: don't raise error or return anything:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", 10)

    FAILING TEST CASES:

    Test for non-calculated area method
        >>> base_geo = BaseGeometry()
        >>> base_geo.area()
        Traceback (most recent call last):
        ...
        Exception: area() is not implemented

    Test integers <= 0
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", 0)
        Traceback (most recent call last):
        ...
        ValueError: checkme must be greater than 0

        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", -999)
        Traceback (most recent call last):
        ...
        ValueError: checkme must be greater than 0

     Test invalid number of arguments:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator()
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("age")
        Traceback (most recent call last):
        ...
        TypeError: integer_validator() missing 1 required positional argument: 'value'

    Test non-integer value inputs:
    No value:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", None)
        Traceback (most recent call last):
        ...
        TypeError: checkme must be an integer

    String value:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", "bye!")
        Traceback (most recent call last):
        ...
        TypeError: checkme must be an integer

    Array:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", [98,99,100])
        Traceback (most recent call last):
        ...
        TypeError: checkme must be an integer
    
    List:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", (98,99,100))
        Traceback (most recent call last):
        ...
        TypeError: checkme must be an integer

    Dictionary:
        >>> base_geo = BaseGeometry()
        >>> base_geo.integer_validator("checkme", {"key": 100})
        Traceback (most recent call last):
        ...
        TypeError: checkme must be an integer
